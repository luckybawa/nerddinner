Index: NerdDinner.Tests/NerdDinner.Tests.csproj
===================================================================
--- NerdDinner.Tests/NerdDinner.Tests.csproj	(revision 16979)
+++ NerdDinner.Tests/NerdDinner.Tests.csproj	(working copy)
@@ -68,6 +68,7 @@
     <Compile Include="Controllers\DinnersControllerTest.cs" />
     <Compile Include="Fakes\FakeDinnerData.cs" />
     <Compile Include="Fakes\FakeDinnerRepository.cs" />
+    <Compile Include="Helpers\PhoneValidatorTest.cs" />
     <Compile Include="Models\DinnerTest.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Controllers\HomeControllerTest.cs" />
Index: NerdDinner/Helpers/PhoneValidator.cs
===================================================================
--- NerdDinner/Helpers/PhoneValidator.cs	(revision 16979)
+++ NerdDinner/Helpers/PhoneValidator.cs	(working copy)
@@ -1,29 +1,28 @@
 ï»¿using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Web;
 using System.Text.RegularExpressions;
 
 namespace NerdDinner.Helpers {
 
-    public class PhoneValidator {
-
-        static IDictionary<string, Regex> countryRegex = new Dictionary<string, Regex>() 
+    public static class PhoneValidator {
+        static readonly IDictionary<string, Regex> countryRegex = new Dictionary<string, Regex> 
         {
                { "USA", new Regex("^[2-9]\\d{2}-\\d{3}-\\d{4}$")},
                { "UK", new Regex("(^1300\\d{6}$)|(^1800|1900|1902\\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\\d{4}$)|(^04\\d{2,3}\\d{6}$)")},
                { "Netherlands", new Regex("(^\\+[0-9]{2}|^\\+[0-9]{2}\\(0\\)|^\\(\\+[0-9]{2}\\)\\(0\\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\\-\\s]{10}$)")},
         };
 
-        public static bool IsValidNumber(string phoneNumber, string country) {
+        public static bool IsValidNumber(string phoneNumber, string country){
+        	if (country == null)
+        		return false;
 
-            if (country != null && countryRegex.ContainsKey(country))
-                return countryRegex[country].IsMatch(phoneNumber);
-            else
-                return false;
+        	if (countryRegex.ContainsKey(country)) 
+				return countryRegex[country].IsMatch(phoneNumber);
+
+        	return false;
         }
 
-        public static IEnumerable<string> Countries {
+    	public static IEnumerable<string> Countries {
             get {
                 return countryRegex.Keys;
             }
